"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var clui_1 = require("clui");
var chalk_1 = require("chalk");
var randomstring = require('randomstring');
var child_process_1 = require("child_process");
var git = require('simple-git/promise');
var opn = require('opn');
var file = require("./lib/file");
var project = require("./lib/project");
var config = require("./lib/config");
var drive = require("./lib/drive");
var inquirer = require("./lib/inquirer");
var misc = require("./lib/misc");
var url_1 = require("./url");
exports.default = (function (noNpmInstall, noGit) {
    if (noNpmInstall === void 0) { noNpmInstall = false; }
    if (noGit === void 0) { noGit = false; }
    return __awaiter(_this, void 0, void 0, function () {
        var status, projectName, projectCapitalizeName, projectConfigs, projectType, error_1, appConfigs, error_2, apiKey, encryptionKey, driveFolder, contentFolder, databaseId, scriptId, error_3, error_4, backendAnswers, error_5, status_1, error_6, error_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!project.isValid()) {
                        return [2 /*return*/, console.log(chalk_1.default.red('\n Looks like you are not in a Sheetbase project!'))];
                    }
                    /**
                     * step 0: start
                     */
                    console.log('\n> Config Sheetbase project.');
                    status = new clui_1.Spinner('Setting up config ...');
                    status.start();
                    projectName = file.getCurrentDirectoryBase();
                    projectCapitalizeName = projectName.charAt(0).toUpperCase() + projectName.slice(1);
                    projectConfigs = {};
                    projectType = 'ionic';
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, project.getConfig()];
                case 2:
                    projectConfigs = _a.sent();
                    projectType = projectConfigs.type || 'ionic';
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    status.stop();
                    return [2 /*return*/, console.log(chalk_1.default.red("\nErrors getting project configs."))];
                case 4:
                    appConfigs = {};
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, config.get(projectType)];
                case 6:
                    appConfigs = _a.sent();
                    return [3 /*break*/, 8];
                case 7:
                    error_2 = _a.sent();
                    status.stop();
                    return [2 /*return*/, console.log(chalk_1.default.red("\nErrors getting app configs."))];
                case 8:
                    apiKey = randomstring.generate();
                    encryptionKey = randomstring.generate({
                        length: 12,
                        charset: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_!@#$%&*'
                    });
                    driveFolder = null;
                    contentFolder = null;
                    databaseId = null;
                    scriptId = null;
                    _a.label = 9;
                case 9:
                    _a.trys.push([9, 15, , 16]);
                    return [4 /*yield*/, drive.createFolder('Sheetbase Project: ' + projectCapitalizeName)];
                case 10:
                    driveFolder = _a.sent();
                    if (!driveFolder) return [3 /*break*/, 14];
                    return [4 /*yield*/, drive.createFolder(projectCapitalizeName + ' Content', [driveFolder])];
                case 11:
                    contentFolder = _a.sent();
                    return [4 /*yield*/, drive.copy(appConfigs.databaseId, projectCapitalizeName + ' Database', [driveFolder])];
                case 12:
                    databaseId = _a.sent();
                    return [4 /*yield*/, drive.createScript(projectCapitalizeName + ' Backend', driveFolder)];
                case 13:
                    scriptId = _a.sent();
                    _a.label = 14;
                case 14: return [3 /*break*/, 16];
                case 15:
                    error_3 = _a.sent();
                    console.log(misc.driveSetupUnsuccessMessage({
                        driveFolder: driveFolder,
                        contentFolder: contentFolder,
                        databaseId: databaseId,
                        scriptId: scriptId
                    }));
                    // fake it if any fails
                    driveFolder = driveFolder || '<project_folder_id>';
                    contentFolder = contentFolder || '<content_folder_id>';
                    databaseId = databaseId || '<database_id>';
                    scriptId = scriptId || '<script_id>';
                    return [3 /*break*/, 16];
                case 16:
                    /**
                     * step 3: save config values
                     */
                    projectConfigs = Object.assign(projectConfigs, {
                        name: projectName,
                        driveFolder: driveFolder
                    });
                    appConfigs = Object.assign(appConfigs, {
                        apiKey: apiKey,
                        encryptionKey: encryptionKey,
                        contentFolder: contentFolder,
                        databaseId: databaseId,
                        scriptId: scriptId
                    });
                    _a.label = 17;
                case 17:
                    _a.trys.push([17, 21, , 22]);
                    return [4 /*yield*/, file.editJson('./package.json', { name: projectName })];
                case 18:
                    _a.sent();
                    return [4 /*yield*/, project.setConfig(projectConfigs)];
                case 19:
                    _a.sent();
                    return [4 /*yield*/, config.set(appConfigs, projectType)];
                case 20:
                    _a.sent();
                    return [3 /*break*/, 22];
                case 21:
                    error_4 = _a.sent();
                    status.stop();
                    return [2 /*return*/, console.log(chalk_1.default.red("\nErrors saving configs."))];
                case 22:
                    /**
                     * Almost done
                     * From now on, do addtional steps
                     */
                    status.stop();
                    console.log(chalk_1.default.green(' ... done!'));
                    if (!scriptId) return [3 /*break*/, 30];
                    _a.label = 23;
                case 23:
                    _a.trys.push([23, 29, , 30]);
                    console.log('\n> Push backend script, must have @google/clasp installed.');
                    return [4 /*yield*/, child_process_1.execSync('clasp push', { cwd: './backend', stdio: 'inherit' })];
                case 24:
                    _a.sent();
                    console.log(chalk_1.default.green(' ... done!'));
                    // open script in browser
                    opn('https://script.google.com/d/' + scriptId + '/edit', { wait: false });
                    // backend url
                    console.log('\n> Update Backend URL.');
                    return [4 /*yield*/, inquirer.askForBackendUrl()];
                case 25:
                    backendAnswers = _a.sent();
                    if (!backendAnswers.backendUrl) return [3 /*break*/, 27];
                    return [4 /*yield*/, config.set({
                            backendUrl: backendAnswers.backendUrl
                        }, projectType)];
                case 26:
                    _a.sent();
                    console.log(chalk_1.default.green(' ... done!'));
                    return [3 /*break*/, 28];
                case 27:
                    console.log(chalk_1.default.yellow(' ... ignored!'));
                    _a.label = 28;
                case 28: return [3 /*break*/, 30];
                case 29:
                    error_5 = _a.sent();
                    return [2 /*return*/, console.log(chalk_1.default.red('\nError trying to push backend script.'))];
                case 30:
                    if (!!noGit) return [3 /*break*/, 38];
                    console.log('\n> Setup git.');
                    _a.label = 31;
                case 31:
                    _a.trys.push([31, 36, , 37]);
                    status_1 = new clui_1.Spinner('Setting up git ...');
                    status_1.start();
                    return [4 /*yield*/, file.rmDir('./.git')];
                case 32:
                    _a.sent();
                    return [4 /*yield*/, git().init()];
                case 33:
                    _a.sent();
                    return [4 /*yield*/, git().add('./*')];
                case 34:
                    _a.sent();
                    return [4 /*yield*/, git().commit('Initial commit')];
                case 35:
                    _a.sent();
                    status_1.stop();
                    return [3 /*break*/, 37];
                case 36:
                    error_6 = _a.sent();
                    return [3 /*break*/, 37];
                case 37:
                    console.log(chalk_1.default.green(' ... done!'));
                    _a.label = 38;
                case 38:
                    if (!!noNpmInstall) return [3 /*break*/, 43];
                    console.log('\n> Install packages.');
                    _a.label = 39;
                case 39:
                    _a.trys.push([39, 41, , 42]);
                    return [4 /*yield*/, child_process_1.execSync('npm install', { cwd: './', stdio: 'inherit' })];
                case 40:
                    _a.sent();
                    return [3 /*break*/, 42];
                case 41:
                    error_7 = _a.sent();
                    return [2 /*return*/, console.log(chalk_1.default.red('\nError trying install packages.'))];
                case 42:
                    console.log(chalk_1.default.green(' ... done!'));
                    _a.label = 43;
                case 43:
                    /**
                     * final: response
                     */
                    console.log('\n> Done!');
                    console.log(chalk_1.default.green(' ... successfully setup Sheetbase project!'));
                    console.log('\nUseful links:');
                    return [4 /*yield*/, url_1.default()];
                case 44:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
});
