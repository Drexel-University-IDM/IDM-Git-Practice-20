"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var config = require("./lib/config");
var project = require("./lib/project");
var inquirer = require("./lib/inquirer");
exports.default = (function (action, data) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!project.isValid()) {
                    return [2 /*return*/, console.log(chalk_1.default.red('\n Looks like you are not in a Sheetbase project!'))];
                }
                if (!(action === 'set')) return [3 /*break*/, 5];
                if (!(data && typeof data === 'string')) return [3 /*break*/, 2];
                return [4 /*yield*/, setManual(data)];
            case 1:
                _a.sent();
                return [3 /*break*/, 4];
            case 2: return [4 /*yield*/, set()];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [3 /*break*/, 7];
            case 5: return [4 /*yield*/, get()];
            case 6:
                _a.sent();
                _a.label = 7;
            case 7: return [2 /*return*/];
        }
    });
}); });
function get() {
    return __awaiter(this, void 0, void 0, function () {
        var appConfigs, configMessage, key;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, config.get()];
                case 1:
                    appConfigs = _a.sent();
                    configMessage = '';
                    for (key in appConfigs) {
                        configMessage += "\n+ " + key + ": " + chalk_1.default.green(appConfigs[key] || 'n/a');
                    }
                    console.log('\nProject configurations:');
                    console.log(configMessage);
                    console.log('\n');
                    return [2 /*return*/];
            }
        });
    });
}
function setManual(data) {
    return __awaiter(this, void 0, void 0, function () {
        var configData, multipleSplit, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    configData = {};
                    multipleSplit = data.split('|');
                    multipleSplit.forEach(function (single) {
                        var singleSplit = single.trim().split('=');
                        if (singleSplit[1]) {
                            configData[singleSplit[0].trim()] = singleSplit[1].trim();
                        }
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    // app config
                    return [4 /*yield*/, config.set(configData)];
                case 2:
                    // app config
                    _a.sent();
                    console.log(chalk_1.default.green('\nConfig updated!'));
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    console.log(chalk_1.default.red('\nErrors setting config!'));
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function set() {
    return __awaiter(this, void 0, void 0, function () {
        var answers, key, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, inquirer.askForConfigs()];
                case 1:
                    answers = _a.sent();
                    for (key in answers) {
                        if (!answers[key])
                            delete answers[key];
                    }
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, config.set(answers)];
                case 3:
                    _a.sent();
                    console.log(chalk_1.default.green('\nConfig updated!'));
                    return [3 /*break*/, 5];
                case 4:
                    error_2 = _a.sent();
                    console.log(chalk_1.default.red('\nErrors setting config!'));
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    });
}
