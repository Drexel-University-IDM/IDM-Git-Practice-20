"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var clui_1 = require("clui");
var child_process_1 = require("child_process");
var git = require('simple-git/promise');
var file = require("./lib/file");
var project = require("./lib/project");
var google = require("./lib/google");
var misc = require("./lib/misc");
exports.default = (function (projectName, theme, noNpmInstall, noGit) {
    if (theme === void 0) { theme = 'ionic-starter'; }
    if (noNpmInstall === void 0) { noNpmInstall = false; }
    if (noGit === void 0) { noGit = false; }
    return __awaiter(_this, void 0, void 0, function () {
        var repoUrl, client, status, error_1, cmd, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    repoUrl = theme;
                    if (!misc.isValidGitUrl(repoUrl)) {
                        repoUrl = 'https://github.com/316Company/sheetbase-' + repoUrl + '.git'; // assume string is a valid official theme name
                    }
                    // build valid folder name & check for existance
                    projectName = file.buildValidName(projectName);
                    if (file.directoryExists('./' + projectName)) {
                        return [2 /*return*/, console.log(chalk_1.default.red('\nProject exists with the name "' + projectName + '", please try other name or delete it!'))];
                    }
                    return [4 /*yield*/, google.getClient()];
                case 1:
                    client = _a.sent();
                    if (!client) {
                        console.log(chalk_1.default.yellow('\n(!) Please login to setup and config the project automatically!') +
                            '\n$ ' + chalk_1.default.green('sheetbase login'));
                    }
                    /**
                     * step 0: start action
                     */
                    console.log('\n> Create new Sheebase project.');
                    status = new clui_1.Spinner('Creating new project ...');
                    status.start();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, git().clone(repoUrl, projectName)];
                case 3:
                    _a.sent();
                    if (!project.isValid(projectName)) {
                        console.log(chalk_1.default.yellow('\n(!) Looks like the repo is not a valid Sheetbase project! Repo url: ' + repoUrl));
                    }
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    status.stop();
                    return [2 /*return*/, console.log(chalk_1.default.red('\nRepo not exists or errors happen! Repo url: ' + repoUrl))];
                case 5:
                    status.stop();
                    console.log(chalk_1.default.green(' ... done!'));
                    _a.label = 6;
                case 6:
                    _a.trys.push([6, 8, , 9]);
                    cmd = 'sheetbase setup';
                    if (noNpmInstall)
                        cmd += ' -x';
                    if (noGit)
                        cmd += ' -u';
                    return [4 /*yield*/, child_process_1.execSync(cmd, { cwd: './' + projectName, stdio: 'inherit' })];
                case 7:
                    _a.sent();
                    return [3 /*break*/, 9];
                case 8:
                    error_2 = _a.sent();
                    return [2 /*return*/, console.log(chalk_1.default.red('\nError trying setup the project.'))];
                case 9: return [2 /*return*/];
            }
        });
    });
});
