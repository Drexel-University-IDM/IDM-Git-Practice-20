"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var replace = require('replace-in-file');
var file = require("./file");
var project = require("./project");
/**
 *
 * @param type - Project type
 */
function get(type) {
    if (type === void 0) { type = 'ionic'; }
    return __awaiter(this, void 0, void 0, function () {
        var result, projectConfigs, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    result = {};
                    if (!!type) return [3 /*break*/, 2];
                    return [4 /*yield*/, project.getConfig()];
                case 1:
                    projectConfigs = _b.sent();
                    type = projectConfigs.type;
                    _b.label = 2;
                case 2:
                    _a = type;
                    switch (_a) {
                        case 'ionic': return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 3];
                case 3: return [4 /*yield*/, getConfigTypeIonic()];
                case 4:
                    result = _b.sent();
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/, result];
            }
        });
    });
}
exports.get = get;
/**
 * Set config for app
 * @param configData - Config data
 * @param type - Project type
 */
function set(configData, type) {
    if (type === void 0) { type = 'ionic'; }
    return __awaiter(this, void 0, void 0, function () {
        var projectConfigs, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!!type) return [3 /*break*/, 2];
                    return [4 /*yield*/, project.getConfig()];
                case 1:
                    projectConfigs = _b.sent();
                    type = projectConfigs.type;
                    _b.label = 2;
                case 2:
                    _a = type;
                    switch (_a) {
                        case 'ionic': return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 3];
                case 3: return [4 /*yield*/, setConfigTypeIonic(configData)];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.set = set;
function getConfigTypeIonic() {
    var result = {};
    // raw values
    var content = '';
    content = file.readText('./backend/configs/Sheetbase.config.js');
    result.apiKey = (content.match(/\"apiKey\"\: \"(.*?)\"/) || [])[1];
    result.encryptionKey = (content.match(/\"encryptionKey\"\: \"(.*?)\"/) || [])[1];
    result.databaseId = (content.match(/\"databaseId\"\: \"(.*?)\"/) || [])[1];
    result.contentFolder = (content.match(/\"contentFolder\"\: \"(.*?)\"/) || [])[1];
    result.authUrl = (content.match(/\"authUrl\"\: \"(.*?)\"/) || [])[1];
    content = file.readText('./src/configs/sheetbase.config.ts');
    result.backendUrl = (content.match(/\"backendUrl\"\: \"(.*?)\"/) || [])[1];
    content = JSON.parse(file.readText('./backend/.clasp.json'));
    result.scriptId = content.scriptId;
    // verify values
    for (var key in result) {
        if (result[key] && result[key].substr(0, 1) === '<' && result[key].substr(result[key].length - 1, 1) === '>')
            delete result[key];
    }
    return result;
}
/**
 * Set App and Backend config for Ionic
 * @param configData - Config data
 */
function setConfigTypeIonic(configData) {
    return __awaiter(this, void 0, void 0, function () {
        var backendConfigFrom, backendConfigTo, appConfigFrom, appConfigTo, key;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    backendConfigFrom = [];
                    backendConfigTo = [];
                    appConfigFrom = [];
                    appConfigTo = [];
                    for (key in configData) {
                        switch (key) {
                            case 'apiKey':
                                backendConfigFrom.push(/\"apiKey\"\: \".*\"/);
                                backendConfigTo.push('"apiKey": "' + configData[key] + '"');
                                appConfigFrom.push(/\"apiKey\"\: \".*\"/);
                                appConfigTo.push('"apiKey": "' + configData[key] + '"');
                                break;
                            case 'databaseId':
                                backendConfigFrom.push(/\"databaseId\"\: \".*\"/);
                                backendConfigTo.push('"databaseId": "' + configData[key] + '"');
                                appConfigFrom.push(/\"databaseId\"\: \".*\"/);
                                appConfigTo.push('"databaseId": "' + configData[key] + '"');
                                break;
                            case 'backendUrl':
                                appConfigFrom.push(/\"backendUrl\"\: \".*\"/);
                                appConfigTo.push('"backendUrl": "' + configData[key] + '"');
                                break;
                            case 'contentFolder':
                                backendConfigFrom.push(/\"contentFolder\"\: \".*\"/);
                                backendConfigTo.push('"contentFolder": "' + configData[key] + '"');
                                break;
                            case 'encryptionKey':
                                backendConfigFrom.push(/\"encryptionKey\"\: \".*\"/);
                                backendConfigTo.push('"encryptionKey": "' + configData[key] + '"');
                                break;
                        }
                    }
                    // backend
                    return [4 /*yield*/, replace({
                            files: './backend/configs/Sheetbase.config.js',
                            from: backendConfigFrom,
                            to: backendConfigTo
                        })];
                case 1:
                    // backend
                    _a.sent();
                    // frontend
                    return [4 /*yield*/, replace({
                            files: './src/configs/sheetbase.config.ts',
                            from: appConfigFrom,
                            to: appConfigTo
                        })];
                case 2:
                    // frontend
                    _a.sent();
                    if (!configData.scriptId) return [3 /*break*/, 4];
                    return [4 /*yield*/, file.editJson('./backend/.clasp.json', {
                            scriptId: configData.scriptId
                        })];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
}
