"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var google = require("./google");
/**
 * Create Drive file
 * @param name - File name
 * @param mimeType - File type
 * @param parents - Parent folders
 */
function createFile(name, mimeType, parents) {
    if (parents === void 0) { parents = []; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, create(name, mimeType, parents)];
        });
    });
}
exports.createFile = createFile;
/**
 * Create Drive folder
 * @param name - Folder name
 * @param parents - Parent folders
 */
function createFolder(name, parents) {
    if (parents === void 0) { parents = []; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, create(name, 'application/vnd.google-apps.folder', parents)];
        });
    });
}
exports.createFolder = createFolder;
/**
 * Create script
 * @param title - Script name
 * @param parentId - Folder id
 */
function createScript(title, parentId) {
    if (parentId === void 0) { parentId = null; }
    return __awaiter(this, void 0, void 0, function () {
        var client, data, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, google.getClient()];
                case 1:
                    client = _a.sent();
                    if (!client)
                        return [2 /*return*/, null];
                    data = {
                        title: title
                    };
                    if (parentId)
                        data.parentId = parentId;
                    return [4 /*yield*/, client.request({
                            method: 'post',
                            url: 'https://script.googleapis.com/v1/projects',
                            data: data
                        })];
                case 2:
                    response = _a.sent();
                    if (!response.data.scriptId)
                        return [2 /*return*/, null];
                    return [2 /*return*/, response.data.scriptId];
            }
        });
    });
}
exports.createScript = createScript;
/**
 * Create Drive file/folder
 * @param name - File/folder name
 * @param mimeType - File type
 * @param parents - Parent folders
 */
function create(name, mimeType, parents) {
    if (parents === void 0) { parents = []; }
    return __awaiter(this, void 0, void 0, function () {
        var client, data, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, google.getClient()];
                case 1:
                    client = _a.sent();
                    if (!client)
                        return [2 /*return*/, null];
                    data = {
                        name: name, mimeType: mimeType
                    };
                    if (parents)
                        data.parents = parents;
                    return [4 /*yield*/, client.request({
                            method: 'post',
                            url: 'https://www.googleapis.com/drive/v3/files',
                            data: data
                        })];
                case 2:
                    response = _a.sent();
                    if (!response.data.id)
                        return [2 /*return*/, null];
                    return [2 /*return*/, response.data.id];
            }
        });
    });
}
exports.create = create;
/**
 * Copy Drive file
 * @param fileId - Source file ID
 * @param name - File name
 * @param parents - Parent folders
 */
function copy(fileId, name, parents) {
    if (parents === void 0) { parents = []; }
    return __awaiter(this, void 0, void 0, function () {
        var client, data, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, google.getClient()];
                case 1:
                    client = _a.sent();
                    if (!client)
                        return [2 /*return*/, null];
                    data = {
                        name: name
                    };
                    if (parents)
                        data.parents = parents;
                    return [4 /*yield*/, client.request({
                            method: 'post',
                            url: 'https://www.googleapis.com/drive/v3/files/' + fileId + '/copy',
                            data: data
                        })];
                case 2:
                    response = _a.sent();
                    if (!response.data.id)
                        return [2 /*return*/, null];
                    return [2 /*return*/, response.data.id];
            }
        });
    });
}
exports.copy = copy;
