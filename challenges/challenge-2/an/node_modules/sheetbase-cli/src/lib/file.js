"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require('fs');
var path = require('path');
var rmdir = require('rmdir');
var editJsonFile = require('edit-json-file');
/**
 * Get current directory base
 */
function getCurrentDirectoryBase() {
    return path.basename(process.cwd());
}
exports.getCurrentDirectoryBase = getCurrentDirectoryBase;
/**
 * Check if file exists
 * @param path - Path to the file
 */
function fileExists(path) {
    try {
        return fs.statSync(path).isFile();
    }
    catch (err) {
        return false;
    }
}
exports.fileExists = fileExists;
/**
 * Check if directory exists
 * @param path - Path to the directory
 */
function directoryExists(path) {
    try {
        return fs.statSync(path).isDirectory();
    }
    catch (err) {
        return false;
    }
}
exports.directoryExists = directoryExists;
/**
 * Check if a string is a valid file/directory name
 * @param name - File/directory name
 */
function isValidName(name) {
    return (name.indexOf('<') < 0 &&
        name.indexOf('>') < 0 &&
        name.indexOf(':') < 0 &&
        name.indexOf('"') < 0 &&
        name.indexOf('/') < 0 &&
        name.indexOf('\\') < 0 &&
        name.indexOf('|') < 0 &&
        name.indexOf('?') < 0 &&
        name.indexOf('*') < 0);
}
exports.isValidName = isValidName;
/**
 * Turn string into a valid file/directory name
 * @param name - File/directory name
 */
function buildValidName(name) {
    return name.replace(/\ /g, '-')
        .replace(/\</g, '-')
        .replace(/\,/g, '-')
        .replace(/\>/g, '-')
        .replace(/\./g, '-')
        .replace(/\?/g, '-')
        .replace(/\//g, '-')
        .replace(/\:/g, '-')
        .replace(/\;/g, '-')
        .replace(/\"/g, '-')
        .replace(/\'/g, '-')
        .replace(/\{/g, '-')
        .replace(/\[/g, '-')
        .replace(/\}/g, '-')
        .replace(/\]/g, '-')
        .replace(/\|/g, '-')
        .replace(/\\/g, '-')
        .replace(/\`/g, '-')
        .replace(/\~/g, '-')
        .replace(/\!/g, '-')
        .replace(/\@/g, '-')
        .replace(/\#/g, '-')
        .replace(/\$/g, '-')
        .replace(/\%/g, '-')
        .replace(/\^/g, '-')
        .replace(/\&/g, '-')
        .replace(/\*/g, '-')
        .replace(/\(/g, '-')
        .replace(/\)/g, '-')
        .replace(/\+/g, '-')
        .replace(/\=/g, '-');
}
exports.buildValidName = buildValidName;
/**
 * Delete directory
 * @param path - Path to the directory
 */
function rmDir(path) {
    return rmdir(path);
}
exports.rmDir = rmDir;
/**
 * Read file contains text
 * @param path - Path to text file
 */
function readText(path) {
    return fs.readFileSync(path, 'utf8');
}
exports.readText = readText;
/**
 * Edit a JSON file
 * @param path - Path to the JSON file
 * @param data - Data to be updated
 */
function editJson(path, data) {
    if (data === void 0) { data = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var jsonFile, key;
        return __generator(this, function (_a) {
            jsonFile = editJsonFile(path);
            for (key in data) {
                jsonFile.set(key, data[key]);
            }
            return [2 /*return*/, jsonFile.save()];
        });
    });
}
exports.editJson = editJson;
