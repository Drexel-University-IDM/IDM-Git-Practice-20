"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var http = require('http');
var url = require('url');
var querystring = require('querystring');
var google_auth_library_1 = require("google-auth-library");
var opn = require('opn');
var Configstore = require('configstore');
var conf = new Configstore('sheetbase_cli');
var KEYS = {
    clientId: '136996720613-tq98bgs242g5lj3fjs18gg3l5ga9it2u.apps.googleusercontent.com',
    redirectUri: 'http://localhost:3160/oauth2callback',
};
var SCOPES = [
    'profile',
    'email',
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/script.projects'
];
/**
 * Get local credentials
 */
function getCredentials() {
    return conf.get('google.credentials');
}
exports.getCredentials = getCredentials;
/**
 * Get Google OAuth2 client
 */
function getClient() {
    return __awaiter(this, void 0, void 0, function () {
        var client, credentials;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = null;
                    credentials = getCredentials();
                    if (!credentials) return [3 /*break*/, 2];
                    client = new google_auth_library_1.OAuth2Client(KEYS);
                    client.setCredentials(credentials);
                    return [4 /*yield*/, client.refreshAccessToken()];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2 /*return*/, client];
            }
        });
    });
}
exports.getClient = getClient;
/**
 * Get Google user profile
 */
function verify() {
    return __awaiter(this, void 0, void 0, function () {
        var user, client, userData, payload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    user = null;
                    return [4 /*yield*/, getClient()];
                case 1:
                    client = _a.sent();
                    if (!client) return [3 /*break*/, 3];
                    return [4 /*yield*/, client.verifyIdToken({
                            idToken: client.credentials.id_token,
                            audience: KEYS.clientId
                        })];
                case 2:
                    userData = _a.sent();
                    payload = userData.getPayload();
                    user = {
                        userId: payload['sub'],
                        email: payload['email'],
                        accessToken: client.credentials.access_token
                    };
                    _a.label = 3;
                case 3: return [2 /*return*/, user];
            }
        });
    });
}
exports.verify = verify;
/**
 * Start authorization process
 */
function authorization() {
    var _this = this;
    return new Promise(function (resolve, reject) {
        var oAuth2Client = new google_auth_library_1.OAuth2Client(KEYS);
        oAuth2Client.on('tokens', function (tokens) {
            if (tokens.refresh_token) {
                conf.set('google.credentials', {
                    refresh_token: tokens.refresh_token
                });
            }
        });
        var authorizeUrl = oAuth2Client.generateAuthUrl({
            access_type: 'offline',
            scope: SCOPES
        });
        var server = http.createServer(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var qs, r;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(req.url.indexOf('/oauth2callback') > -1)) return [3 /*break*/, 3];
                        qs = querystring.parse(url.parse(req.url).query);
                        if (qs.error) {
                            res.end('Authentication fails, please try again!');
                        }
                        else {
                            res.end('Authentication successful! You may close this browser tab and return to the console.');
                        }
                        server.close();
                        if (!qs.code) return [3 /*break*/, 2];
                        return [4 /*yield*/, oAuth2Client.getToken(qs.code)];
                    case 1:
                        r = _a.sent();
                        oAuth2Client.setCredentials(r.tokens);
                        resolve(oAuth2Client);
                        return [3 /*break*/, 3];
                    case 2:
                        reject();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); }).listen(3160, function () {
            opn(authorizeUrl, { wait: false });
        });
    });
}
exports.authorization = authorization;
/**
 * Clear local credentials
 */
function deauthorization() {
    return conf.delete('google.credentials');
}
exports.deauthorization = deauthorization;
